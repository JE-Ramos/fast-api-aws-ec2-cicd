name: FastAPI SaaS CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests with coverage
      run: |
        pytest tests/ \
          --cov=app \
          --cov-branch \
          --cov-report=term-missing:skip-covered \
          --cov-report=html:htmlcov \
          --cov-report=xml:coverage.xml \
          --cov-report=json:coverage.json \
          --junitxml=pytest.xml | tee pytest-coverage.txt
    
    - name: Upload coverage to Codecov
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Pytest Coverage Comment
      if: github.event_name == 'pull_request'
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./pytest.xml
        title: Coverage Report
        badge-title: Coverage
        hide-badge: false
        hide-report: false
        create-new-comment: false
        hide-comment: false
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          htmlcov/
          coverage.xml
          coverage.json
          pytest.xml
        retention-days: 30
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install AWS CDK
      run: npm install -g aws-cdk
    
    - name: Install CDK dependencies
      run: |
        cd infra
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
    
    - name: CDK Synth Staging
      run: |
        cd infra
        export REPOSITORY_URL=${{ github.server_url }}/${{ github.repository }}.git
        cdk synth FastAPIEC2Stack-Staging
    
    - name: Deploy to Staging
      run: |
        cd infra
        export REPOSITORY_URL=${{ github.server_url }}/${{ github.repository }}.git
        cdk deploy FastAPIEC2Stack-Staging --require-approval never
    
  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://your-domain.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install AWS CDK
      run: npm install -g aws-cdk
    
    - name: Install CDK dependencies
      run: |
        cd infra
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
    
    - name: CDK Synth Production
      run: |
        cd infra
        export REPOSITORY_URL=${{ github.server_url }}/${{ github.repository }}.git
        cdk synth FastAPIEC2Stack-Production
    
    - name: Deploy to Production
      run: |
        cd infra
        export REPOSITORY_URL=${{ github.server_url }}/${{ github.repository }}.git
        cdk deploy FastAPIEC2Stack-Production --require-approval never