name: Deploy to AWS EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        cd app
        python -m pytest ../tests/ -v --cov=./ --cov-report=xml
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install AWS CDK
      run: npm install -g aws-cdk
    
    - name: Install CDK dependencies
      run: |
        cd infra
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: CDK Synth
      run: |
        cd infra
        cdk synth
    
    - name: CDK Deploy
      run: |
        cd infra
        cdk deploy FastAPIEC2Stack --require-approval never
    
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "$EC2_KEY" > ec2_key.pem
        chmod 600 ec2_key.pem
        
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem $EC2_USER@$EC2_HOST << 'EOF'
          cd /home/ec2-user/app
          git pull origin main
          pip3 install -r app/requirements.txt
          sudo systemctl restart fastapi
        EOF
        
        rm -f ec2_key.pem